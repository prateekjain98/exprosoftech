---
import { join } from "node:path";
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/components/Header";
import "@/styles/main.scss";
import { AstroFont } from "astro-font";
import { ViewTransitions } from "astro:transitions";
import { sanityClient } from "sanity:client";
import type { NavigationLink } from "@/components/Header";
import { createQueries } from "@/lib/utils/hostnameFIltering";

// Fetch navigation data from Sanity
let navigationData: NavigationLink[] = [];
let productDropdownData: any[] = [];
let serviceDropdownData: any[] = [];
let consultingDropdownData: any[] = [];

try {
  // Get hostname for filtering
  const hostname = Astro.url.hostname;
  const queries = createQueries(hostname);

  // First, let's test what's actually in the database
  const testQuery = `*[_type == "dynamicServicePage"] {
    _id,
    title,
    "slug": slug.current,
    _createdAt,
    _updatedAt
  }`;

  // Build queries with hostname-aware filtering
  const productsQuery = `${queries.products()} {
    "name": title,
    "slug": slug.current,
    "description": metaDescription,
    isLive
  }`;

  const servicesQuery = `${queries.services()} {
    "name": title,
    "slug": slug.current,
    "description": metaDescription,
    isLive
  }`;

  // Fetch consulting pages (no isLive filtering needed)
  const consultingQuery = `*[_type == "dynamicConsultingsPage"] | order(_createdAt asc) {
    "name": title,
    "slug": slug.current,
    "description": metaDescription
  }`;

  // Use dropdown content types for navigation with hostname-aware filtering
  const productDropdownQuery = `${queries.productDropdown()} {
    title,
    "slug": slug.current,
    description,
    isLive
  }`;

  const serviceDropdownQuery = `${queries.serviceDropdown()} {
    title,
    "slug": slug.current,
    description,
    isLive
  }`;

  const consultingDropdownQuery = `*[_type == "consultingDropdownContent" && isActive == true] {
    name,
    dropdownContent {
      tagline,
      title,
      description,
      features,
      backgroundImage {
        asset->{
          url
        },
        alt
      },
      productImages[] {
        asset->{
          url
        },
        alt
      }
    }
  }`;

  const [
    products,
    services,
    consulting,
    productDropdown,
    serviceDropdown,
    consultingDropdown,
  ] = await Promise.all([
    sanityClient.fetch(productsQuery),
    sanityClient.fetch(servicesQuery),
    sanityClient.fetch(consultingQuery),
    sanityClient.fetch(productDropdownQuery),
    sanityClient.fetch(serviceDropdownQuery),
    sanityClient.fetch(consultingDropdownQuery),
  ]);

  // Store the product dropdown data
  productDropdownData = productDropdown;
  serviceDropdownData = serviceDropdown;
  consultingDropdownData = consultingDropdown;

  // Build navigation structure

  navigationData = [
    // {
    //   name: "Consulting",
    //   url: "",
    //   hasChildren: consulting.length > 0,
    //   children: consulting.map((item: {name: string; slug: string; description?: string}) => ({
    //     name: item.name,
    //     url: `/consulting/${item.slug}/`,
    //     description: item.description
    //   }))
    // },
    {
      name: "Services",
      url: "",
      hasChildren: serviceDropdown.length > 0,
      children: serviceDropdown.map(
        (item: { title: string; slug: string; description?: string }) => ({
          name: item.title,
          url: `/services/${item.slug}/`,
          description: item.description,
        })
      ),
    },
    {
      name: "Products",
      url: "",
      hasChildren: productDropdown.length > 0,
      children: productDropdown.map(
        (item: { title: string; slug: string; description?: string }) => ({
          name: item.title,
          url: `/products/${item.slug}/`,
          description: item.description,
        })
      ),
    },
    // {
    //   name: "Solutions",
    //   url: "/solutions/",
    // },
    {
      name: "Case Studies",
      url: "/case-studies/",
    },

    {
      name: "Industries",
      url: "/industries/",
    },
    {
      name: "Blogs",
      url: "/blog/",
    },
    {
      name: "About Us",
      url: "/about/",
    },
    {
      name: "Contact Us",
      url: "/contact/",
    },
  ];
} catch (error) {
  console.error("Error fetching data:", error);
  navigationData = [];
  productDropdownData = [];
}

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  notFoundPage?: boolean;
  meta_title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
}

// destructure frontmatter
const {
  title,
  meta_title,
  notFoundPage,
  description,
  image,
  noindex,
  canonical,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <link rel="sitemap" href="/sitemap.xml" />
    <!-- preload logo for LCP optimization with proper dimensions -->
    <link
      rel="preload"
      as="image"
      href="/_vercel/image?url=%2Fimages%2Fnew-logo.webp&w=50&q=90"
      fetchpriority="high"
      imagesrcset="/_vercel/image?url=%2Fimages%2Fnew-logo.webp&w=50&q=90 50w, /_vercel/image?url=%2Fimages%2Fnew-logo.webp&w=100&q=90 100w"
      imagesizes="50px"
    />

    <!-- preconnect to external domains -->
    <link rel="preconnect" href="https://cdn.sanity.io" />
    <link rel="preconnect" href="https://js.zi-scripts.com" />
    <link rel="dns-prefetch" href="https://cdn.sanity.io" />
    <link rel="dns-prefetch" href="https://js.zi-scripts.com" />

    <!-- preload critical fonts -->
    <link
      rel="preload"
      href="/fonts/Satoshi-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/Satoshi-Medium.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/ClashGrotesk-Medium.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <!-- theme meta -->
    <meta name="theme-name" content="Exprosoftech-astro" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          name: pf,
          src: [
            {
              style: "normal",
              weight: "400",
              path: join(
                process.cwd(),
                "public",
                "fonts",
                "Satoshi-Regular.woff2"
              ),
            },
            {
              style: "normal",
              weight: "500",
              path: join(
                process.cwd(),
                "public",
                "fonts",
                "Satoshi-Medium.woff2"
              ),
            },
            {
              style: "normal",
              weight: "700",
              path: join(
                process.cwd(),
                "public",
                "fonts",
                "Satoshi-Bold.woff2"
              ),
            },
          ],
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "sans-serif",
          cssVariable: "font-primary",
        },
        {
          name: sf,
          src: [
            {
              style: "normal",
              weight: "500",
              path: join(
                process.cwd(),
                "public",
                "fonts",
                "ClashGrotesk-Medium.woff2"
              ),
            },
          ],
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "sans-serif",
          cssVariable: "font-secondary",
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- title -->
    <title>
      {plainify(meta_title ? meta_title : title ? title : config.site.title)}
    </title>

    <!-- canonical url -->
    {canonical && <link rel="canonical" href={canonical} item-prop="url" />}

    <!-- noindex robots -->
    {noindex && <meta name="robots" content="noindex,nofollow" />}

    <!-- meta-description -->
    <meta
      name="description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />

    <ViewTransitions />

    <!-- author from config.json -->
    <meta name="author" content={config.metadata.meta_author} />

    <!-- og-title -->
    <meta
      property="og:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />

    <!-- og-description -->
    <meta
      property="og:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />
    <meta property="og:type" content="website" />
    <meta
      property="og:url"
      content={`${config.site.base_url.replace(/\/$/, "")}${Astro.url.pathname}`}
    />
    <!-- og-image -->
    <meta
      property="og:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />

    <!-- twitter-title -->
    <meta
      name="twitter:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />

    <!-- twitter-description -->
    <meta
      name="twitter:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />

    <!-- twitter-image -->
    <meta
      name="twitter:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />
    <meta name="twitter:card" content="summary_large_image" />

    <!-- Calendly Integration -->
    <!-- 
     -->

    <style is:global>
      /* Critical CSS for above-the-fold content */
      body {
        font-family: "Satoshi", sans-serif;
        font-display: swap;
        line-height: 1.6;
        color: #475569;
        background-color: #fff;
      }

      /* Prevent layout shift by setting dimensions */
      img {
        height: auto;
        max-width: 100%;
      }

      /* Header and navigation critical styles */
      header {
        position: relative;
        z-index: 1000;
      }

      /* Main content container - prevent layout shift */
      #main-content {
        min-height: 50vh;
        contain: layout style paint;
      }

      /* Prevent layout shift for common elements */
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
      }

      /* Ensure proper aspect ratios for images */
      .aspect-ratio-container {
        position: relative;
        width: 100%;
        height: 0;
      }

      .aspect-ratio-container img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      /* Menu overlay styles */
      body.menu-open::after {
        content: "";
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 998;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
        animation: fadeIn 0.2s ease-in-out forwards;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      /* Prevent FOUC (Flash of Unstyled Content) */
      .astro-loading {
        visibility: hidden;
      }

      .astro-loaded {
        visibility: visible;
      }
    </style>

    <!-- ZoomInfo Script - Optimized for performance -->
    <script is:inline>
      // Defer ZoomInfo loading until after critical resources
      function loadZoomInfo() {
        window[
          (function (_7lr, _tq) {
            var _DZY9D = "";
            for (var _iqRIip = 0; _iqRIip < _7lr.length; _iqRIip++) {
              _IbJL != _iqRIip;
              var _IbJL = _7lr[_iqRIip].charCodeAt();
              _IbJL -= _tq;
              _IbJL += 61;
              _IbJL %= 94;
              _IbJL += 33;
              _tq > 3;
              _DZY9D += String.fromCharCode(_IbJL);
            }
            return _DZY9D;
          })(atob("IW51OTYxLCo7cCxA"), 37)
        ] = "3f462c45901741670764";
        var zi = document.createElement("script");
        zi.type = "text/javascript";
        zi.async = true;
        zi.defer = true;
        zi.src = (function (_GSN, _t4) {
          var _aUlL9 = "";
          for (var _NpzqWL = 0; _NpzqWL < _GSN.length; _NpzqWL++) {
            var _HjNJ = _GSN[_NpzqWL].charCodeAt();
            _t4 > 3;
            _HjNJ != _NpzqWL;
            _aUlL9 == _aUlL9;
            _HjNJ -= _t4;
            _HjNJ += 61;
            _HjNJ %= 94;
            _HjNJ += 33;
            _aUlL9 += String.fromCharCode(_HjNJ);
          }
          return _aUlL9;
        })(atob("N0NDP0JnXFw5QltJOFpCMkE4P0NCWzI+PFxJOFpDMDZbOUI="), 45);
        document.head.appendChild(zi);
      }

      // Load after page is interactive
      if (document.readyState === "complete") {
        setTimeout(loadZoomInfo, 1000);
      } else {
        window.addEventListener("load", function () {
          setTimeout(loadZoomInfo, 1000);
        });
      }
    </script>
  </head>
  <body class="astro-loading">
    <TwSizeIndicator />
    <Header
      client:only="react"
      banner={Astro.url.pathname === "/"}
      errorPage={notFoundPage}
      pathname={Astro.url.pathname}
      navigationData={navigationData}
      productDropdownData={productDropdownData}
      serviceDropdownData={serviceDropdownData}
      consultingDropdownData={consultingDropdownData}
    />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
    <script>
      import "aos/dist/aos.css";
      import AOS from "aos";

      let scrollRef = 0;

      // Fix `not animating although in viewport` issue
      window.addEventListener("scroll", function () {
        scrollRef <= 10 ? scrollRef++ : AOS.refresh();
      });

      function aosInit() {
        AOS.init({
          duration: 450,
          offset: 100,
          once: true,
        });
      }

      function scriptInit() {
        // Dropdown Menu Toggler For Mobile
        // ----------------------------------------
        const dropdownMenuToggler: NodeListOf<HTMLElement> =
          document.querySelectorAll(".nav-dropdown > .nav-link");

        dropdownMenuToggler.forEach((toggler) => {
          toggler?.addEventListener("click", (e: Event) => {
            const target = e.target as HTMLElement;
            target && target.parentElement?.classList.toggle("active");
          });
        });
      }

      document.addEventListener("astro:page-load", () => {
        scriptInit();
        aosInit();
        // Remove loading class to prevent FOUC
        document.body.classList.remove("astro-loading");
        document.body.classList.add("astro-loaded");
      });
    </script>
  </body>
</html>
