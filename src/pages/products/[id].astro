---
import Base from "@/layouts/Base.astro";
import { Clients } from "../../components/Clients";
import { AdditionalFeatures } from "../../components/common/AdditionalFeatures";
import NewFAQ from "../../components/NewFAQ";
import { FeaturesGrid } from "../../components/common/FeaturesGrid";
import { FeatureShowcase } from "../../components/common/FeatureShowcase";
import { MobileFeatures } from "../../components/common/MobileFeatures";
import { ProductHeader } from "../../components/common/ProductHeader";
import { sanityClient } from "sanity:client";
import { DynamicCTA } from "../../components/DynamicCTA";
import { ServicesBestPractices } from "@/components/services";
import { DynamicCloudSpecialization } from "../../components/DynamicCloudSpecializations";
import BlogCarousel from "../../components/BlogCarousel";
import { createQueries } from "@/lib/utils/hostnameFIltering";

//ssr

interface Product {
  id: string;
  title: string;
  metaTitle: string;
  metaDescription: string;
  headerContent: any;
  clients: any;
  featuresGridSection: any;
  bestPracticesSection: any;
  mobileFeaturesSection: any;
  featureShowcaseSection: any;
  additionalFeaturesSection: any;
  faqSection: any;
  ctaSection: any;
}

const { id } = Astro.params;

// Fetch product data directly
const product = await sanityClient.fetch(`
  *[_type == "dynamicProductPage" && slug.current == $id][0] {
    "id": slug.current,
    title,
    metaTitle,
    metaDescription,
    image,
    canonicalUrl,
    isLive,
    headerContent {
      badge,
      title,
      subtitle,
      description,
      image {
        "src": src.asset->url,
        alt
      },
      buttons[] {
        label,
        link,
        isOpenBooking
      }
    },
    clients,
    featuresGridSection,
    mobileFeaturesSection {
      title,
      description,
      features[] {
        title,
        description,
        icon
      },
      image {
        "src": src.asset->url,
        alt
      },
      metricValues[] {
        value,
        label
      }
    },
    featureShowcaseSection {
      tagline,
      title,
      description,
      features[] {
        title,
        description
      },
      image {
        "src": src.asset->url,
        alt
      },
      button {
        text,
        link
      }
    },
    benfitsSection {
      heading {
        subtitle,
        title,
        description
      },
      benefits[] {
        title,
        description
      }
    },
    additionalFeaturesSection,
    faqSection,
    ctaSection {
      tagline,
      title,
      subtitle,
      description,
      metrices,
      buttons[] {
        label,
        link,
        isOpenBooking
      },
      image {
        "src": src.asset->url,
        alt
      }
    }
  }
`, { id });

// Get hostname for filtering
const hostname = Astro.url.hostname;
const queries = createQueries(hostname);

// Fetch product blogs for carousel with hostname-aware filtering
const productBlogsQuery = `${queries.productBlogs(5)} {
  seoTitle,
  seoDescription,
  title,
  "slug": slug.current,
  date,
  excerpt,
  "image": image.asset->url,
  "author": author->{
    name,
    "image": image.asset->url
  },
  tags,
  isLive
}`;

const productBlogs = await sanityClient.fetch(productBlogsQuery);


// Check hostname and isLive status
if (hostname === 'exprosoftech.com' && !product.isLive) {
  return Astro.redirect('/404');
}

// Transform data for carousel component
const carouselPosts = productBlogs.map((blog: any) => ({
  title: blog.title,
  slug: blog.slug,
  excerpt: blog.excerpt || '',
  image: blog.image || '',
  date: blog.date,
  author: blog.author?.name || ''
}));

---

<Base
  title={product.title}
  meta_title={product.metaTitle}
  description={product.metaDescription}
  image={product.image}
  canonical={product.canonicalUrl}
>
{product.headerContent && (
  <ProductHeader {...product.headerContent} client:load />
  )
}
  
  <!-- <Clients client:visible data={product.clients} /> -->

{product.mobileFeaturesSection &&
  <MobileFeatures 
    client:visible 
    mobileFeatures={product.mobileFeaturesSection} 
  />
}

  {product.featureShowcaseSection && 
    <FeatureShowcase 
    showcaseContent={product.featureShowcaseSection} 
    client:load 
    />
  }
  
  {product.featuresGridSection && (
    <FeaturesGrid 
    client:visible 
    features={product.featuresGridSection.features} 
    heading={product.featuresGridSection.heading} 
    />
  )}

  <!-- <ServicesBestPractices
    client:visible 
    benefits={product.bestPracticesSection?.bestPractices} 
    heading={product.bestPracticesSection?.heading}
  />  -->

  {product.benfitsSection && (
    <DynamicCloudSpecialization
      client:visible
      cloudSpecializations={product.benfitsSection?.benefits}
      heading={product.benfitsSection?.heading}
    />
  )}
  
  {carouselPosts.length > 0 && (
    <BlogCarousel posts={carouselPosts} client:visible />
  )}

  
  <!-- <AdditionalFeatures 
    client:load 
    additionalFeatures={{
      heading: product.additionalFeaturesSection.heading,
      features: product.additionalFeaturesSection.features
    }} 
  /> -->
  <!-- <NewFAQ client:load Faq={[product.faqSection]} /> -->
  {product.ctaSection &&  (
    <DynamicCTA client:visible ctaContent={product.ctaSection} /> 
  )}
</Base>
