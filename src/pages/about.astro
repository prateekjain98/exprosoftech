---
import Base from "@/layouts/Base.astro";
import AboutBanner from "../components/AboutBanner";
import AboutCompany from "../components/AboutCompany";
import LeadershipTeam from "../components/LeadershipTeam";
import WhyGreymetre from "../components/WhyGreymetre";
import NewFAQ from "../components/NewFAQ";
import { sanityClient } from "sanity:client";
import BusinessGuidance from "../components/BusinessGuidance";
import Offerings from "../components/Offerings";
import IndustriesWeServe from "../layouts/components/IndustriesWeServe";
import { DynamicCTA } from "../components/DynamicCTA";
import ContentSection from "../components/ContentSection";
import CompanyActivitiesSection from "../components/CompanyActivitiesSection";
import { PartnerLogos } from "../components/PartnerLogos";

// GROQ query to fetch all about page data
const aboutQuery = `*[_type == "about"][0] {
  meta {
    title,
    description,
    meta_title,
    canonicalUrl,
    image {
      asset->
    }
  },
  bannerSection {
    subtitle,
    title,
    description,
    content,
    image {
      asset->
    },
    imageOverlay {
      value,
      label
    },
    buttons[] {
      label,
      link,
      isOpenBooking
    }
  },
  contentSection {
      isVisible,
      subtitle,
      title,
      content,
      image {
        asset->{
          url
        }
      },
      imageOverlay {
        value,
        label,
        position
      },
      cta {
        label,
        link,
        isOpenBooking
      }
  },
  businessGuidance {
    title,
    subtitle,
    description,
    image {
      asset-> {
        url
      },
      alt
    },
    guidancePoints[] {
      id,
      title,
      description
    },
    empowerment {
      title,
      subtitle,
      description,
      points[] {
        icon,
        title,
        description
      },
      empowermentImage {
        asset-> {
          url
        },
        alt
      }
    }
  },
  offeringsSection {
    heading {
      title,
      subtitle,
      description
    },
    offerings[] {
      title,
      description[],
      iconName
    }
  },
  companySection {
    subtitle,
    title,
    description,
    content,
    image {
      asset->
    },
    imageOverlay {
      value,
      label
    }
  },
  companyActivitiesSection {
    isVisible,
    title,
    description,
    image {
      asset->{
        url
      },
      alt
    }
  },
  partnerLogosSection {
      isVisible,
      title,
      subtitle,
      logos[] {
        "src": src.asset->url,
        alt,
        name
      }
  },
  leadershipSection {
    subtitle,
    title,
    description,
    leaders[] {
      name,
      title,
      description,
      linkedin,
      image {
        asset->
      }
    }
  },
  whySection {
    subtitle,
    title,
    description,
    features[] {
      title,
      description,
      icon
    }
  },
  industriesSection {
    heading { title, subtitle, description },
    industries[] { name, description, icon }
  },
  faqSection {
    title,
    subtitle,
    description,
    list[] {
      title,
      description,
      active
    }
  },
  ctaSection {
    tagline,
    title,
    subtitle,
    description,
    metrices[] {
      value,
      label,
      icon
    },
    buttons[] {
      label,
      link,
      isOpenBooking
    },
    image {
      "src": src.asset->url,
      alt
    }
  }
}`

const pageData = await sanityClient.fetch(aboutQuery);

// Destructure meta data
const { meta, bannerSection, companySection, leadershipSection, whySection, faqSection, offeringsSection, ctaSection, contentSection, companyActivitiesSection } = pageData;

// Structure data for each component
const bannerData = {
  subtitle: bannerSection.subtitle,
  title: bannerSection.title,
  description: bannerSection.description,
  content: bannerSection.content,
  featuredImage: bannerSection.image,
  imageOverlay: bannerSection.imageOverlay,
  buttons: bannerSection.buttons
};

const contentData = {
  subtitle: contentSection.subtitle,
  title: contentSection.title,
  description: contentSection.description,
  content: contentSection.content,
  image: contentSection.image,
  imageOverlay: contentSection.imageOverlay,
  buttons: contentSection.buttons
};

const businessGuidanceData = {
  title: pageData.businessGuidance.title,
  subtitle: pageData.businessGuidance.subtitle,
  description: pageData.businessGuidance.description,
  image: {
    src: pageData.businessGuidance.image?.asset?.url || '',
    alt: pageData.businessGuidance.image?.alt || ''
  },
  guidancePoints: pageData.businessGuidance.guidancePoints
};

const empowermentData = {
  title: pageData.businessGuidance.empowerment.title,
  subtitle: pageData.businessGuidance.empowerment.subtitle,
  description: pageData.businessGuidance.empowerment.description,
  points: pageData.businessGuidance.empowerment.points,
  empowermentImage: {
    src: pageData.businessGuidance.empowerment.empowermentImage?.asset?.url || '',
    alt: pageData.businessGuidance.empowerment.empowermentImage?.alt || ''
  }
};

const offeringsData = {
  heading: {
    title: pageData.offeringsSection?.heading?.title || '',
    subtitle: pageData.offeringsSection?.heading?.subtitle || '',
    description: pageData.offeringsSection?.heading?.description || ''
  },
  offerings: pageData.offeringsSection?.offerings?.map((offering: any) => ({
    title: offering.title,
    description: offering.description || [],
    iconName: offering.iconName || ''
  })) || []
};

const companyData = {
  subtitle: companySection?.subtitle,
  title: companySection?.title,
  description: companySection?.description,
  content: companySection?.content,
  featuredImage: companySection?.image,
  imageOverlay: companySection?.imageOverlay
};

const companyActivitiesData = {
  title: companyActivitiesSection.title,
  description: companyActivitiesSection.description,
  image: {
    asset: {
      url: companyActivitiesSection.image?.asset?.url || ''
    },
    alt: companyActivitiesSection.image?.alt || ''
  }
};

const partnerLogosData = {
  isVisible: pageData.partnerLogosSection?.isVisible,
  title: pageData.partnerLogosSection?.title,
  subtitle: pageData.partnerLogosSection?.subtitle,
  logos: pageData.partnerLogosSection?.logos
};

const leadershipData = {
  subtitle: leadershipSection.subtitle,
  title: leadershipSection.title,
  description: leadershipSection.description,
  leaders: leadershipSection.leaders
};

const whyGreymetreData = {
  subtitle: whySection.subtitle,
  title: whySection.title,
  description: whySection.description,
  features: whySection.features
};

const faqData = [{
  title: faqSection.title,
  subtitle: faqSection.subtitle,
  description: faqSection.description,
  list: faqSection.list
}];

const ctaData = {
  tagline: ctaSection.tagline,
  title: ctaSection.title,
  subtitle: ctaSection.subtitle || "",
  description: ctaSection.description,
  metrices: ctaSection.metrices || [],
  buttons: ctaSection.buttons,
  image: {
    src: ctaSection.image?.src || "",
    alt: ctaSection.image?.alt || ""
  }
};
---

<Base
  title={meta.title}
  meta_title={meta.meta_title}
  description={meta.description}
  image={meta.image}
  canonical={meta.canonicalUrl}
>
  <AboutBanner client:load data={bannerData} />

  {contentSection?.isVisible && (
    <ContentSection client:visible data={contentData} />
  )}

  <BusinessGuidance 
    client:visible 
    businessGuidanceData={businessGuidanceData}
    empowermentData={empowermentData}
  />

  {companySection && (
    <AboutCompany client:load data={companyData} />
  )}
  <Offerings client:visible data={offeringsData} />
  <!-- <IndustriesWeServe client:visible data={pageData.industriesSection} /> -->

  
  {
    partnerLogosData.isVisible && (
      <PartnerLogos client:visible data={partnerLogosData} />
    )
  }
  
  <LeadershipTeam 
    client:load 
    subtitle={leadershipData.subtitle}
    title={leadershipData.title}
    description={leadershipData.description}
    leadershipTeamData={{ leaders: leadershipData.leaders }} 
  />

  {companyActivitiesSection?.isVisible && (
    <CompanyActivitiesSection client:load data={companyActivitiesData} />
  )}

  <WhyGreymetre client:load data={whyGreymetreData} />
  <NewFAQ client:load Faq={faqData} />
  <DynamicCTA client:visible ctaContent={ctaData} />
</Base>
